using UnityEngine;
using UnityEngine.Networking;

public class VRScreenSharing : NetworkBehaviour
{
    // Reference to the VR camera or screen where content will be displayed
    public Camera vrCamera;

    // Texture to render the shared screen content
    private RenderTexture sharedScreenTexture;

    // Flag to indicate whether screen sharing is active
    private bool isSharingScreen = false;

    void Start()
    {
        // Create a RenderTexture for the shared screen content
        sharedScreenTexture = new RenderTexture(Screen.width, Screen.height, 24);
        vrCamera.targetTexture = sharedScreenTexture;
    }

    void Update()
    {
        if (isLocalPlayer)
        {
            // Check for input to start/stop screen sharing
            if (Input.GetKeyDown(KeyCode.S))
            {
                CmdToggleScreenSharing(!isSharingScreen);
            }
        }
    }

    [Command]
    void CmdToggleScreenSharing(bool enable)
    {
        RpcToggleScreenSharing(enable);
    }

    [ClientRpc]
    void RpcToggleScreenSharing(bool enable)
    {
        if (enable)
        {
            // Start screen sharing
            StartScreenSharing();
        }
        else
        {
            // Stop screen sharing
            StopScreenSharing();
        }
    }

    void StartScreenSharing()
    {
        isSharingScreen = true;

        // Assign the shared screen texture to the VR camera
        vrCamera.targetTexture = sharedScreenTexture;

        // Start capturing and sending the screen content
        StartCoroutine(SendScreenContent());
    }

    void StopScreenSharing()
    {
        isSharingScreen = false;

        // Reset the VR camera target texture
        vrCamera.targetTexture = null;

        // Stop capturing and sending screen content
        StopCoroutine(SendScreenContent);
    }

    IEnumerator SendScreenContent()
    {
        while (isSharingScreen)
        {
            // Capture the screen content
            Texture2D screenTexture = CaptureScreen();

            // Convert the texture to bytes
            byte[] screenBytes = screenTexture.EncodeToJPG();

            // Send the bytes over the network
            CmdSendScreenBytes(screenBytes);

            // Wait for the next frame
            yield return null;
        }
    }

    [Command]
    void CmdSendScreenBytes(byte[] screenBytes)
    {
        RpcReceiveScreenBytes(screenBytes);
    }

    [ClientRpc]
    void RpcReceiveScreenBytes(byte[] screenBytes)
    {
        // Decode and display the received screen content
        Texture2D receivedTexture = new Texture2D(Screen.width, Screen.height);
        receivedTexture.LoadImage(screenBytes);
        GetComponent<Renderer>().material.mainTexture = receivedTexture;
    }

    Texture2D CaptureScreen()
    {
        // Capture the screen content into a Texture2D
        Texture2D screenTexture = new Texture2D(Screen.width, Screen.height);
        screenTexture.ReadPixels(new Rect(0, 0, Screen.width, Screen.height), 0, 0);
        screenTexture.Apply();
        return screenTexture;
    }
}
